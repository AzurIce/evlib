name: Publish

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      publish_to:
        description: "Where to publish"
        required: true
        default: "both"
        type: choice
        options: [both, pypi, crates]
      test_mode:
        description: "Use test repositories"
        required: false
        default: false
        type: boolean

jobs:
  check-version:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.check.outputs.should_publish }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get version and check if changed
        id: version
        run: |
          version=$(grep '^version[[:space:]]*=' Cargo.toml | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Current version: $version"

      - name: Check if should publish
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          elif git diff HEAD~1 HEAD --name-only | grep -q "Cargo.toml"; then
            prev_version=$(git show HEAD~1:Cargo.toml | grep '^version[[:space:]]*=' | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
            if [ "${{ steps.version.outputs.version }}" != "$prev_version" ]; then
              echo "should_publish=true" >> $GITHUB_OUTPUT
            else
              echo "should_publish=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

  build-wheels:
    runs-on: ${{ matrix.os }}
    needs: [check-version]
    timeout-minutes: 30
    if: |
      needs.check-version.outputs.should_publish == 'true' &&
      (github.event_name == 'push' || github.event.inputs.publish_to == 'both' || github.event.inputs.publish_to == 'pypi' || github.event.inputs.publish_to == '')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds with multiple GLIBC versions
          - os: ubuntu-20.04  # GLIBC 2.31 - broader compatibility
            platform: linux
            arch: x86_64
            python-version: "3.10"
          - os: ubuntu-20.04
            platform: linux
            arch: x86_64
            python-version: "3.11"
          - os: ubuntu-20.04
            platform: linux
            arch: x86_64
            python-version: "3.12"

          # macOS builds
          - os: macos-13  # Intel macOS
            platform: macos
            arch: x86_64
            python-version: "3.10"
          - os: macos-13
            platform: macos
            arch: x86_64
            python-version: "3.11"
          - os: macos-13
            platform: macos
            arch: x86_64
            python-version: "3.12"

          - os: macos-14  # ARM64 macOS
            platform: macos
            arch: arm64
            python-version: "3.10"
          - os: macos-14
            platform: macos
            arch: arm64
            python-version: "3.11"
          - os: macos-14
            platform: macos
            arch: arm64
            python-version: "3.12"

    steps:
      - uses: actions/checkout@v4

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: ${{ matrix.python-version }}
          os: ${{ matrix.os }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.platform == 'linux' && 'x86_64-unknown-linux-gnu' || matrix.platform == 'macos' && matrix.arch == 'arm64' && 'aarch64-apple-darwin' || 'x86_64-apple-darwin' }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: build-wheels-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.arch }}

      - name: Install maturin
        run: |
          source .venv/bin/activate
          uv pip install maturin>=1.7.4

      - name: Build wheels
        run: |
          source .venv/bin/activate

          # Set target architecture for cross-compilation
          if [ "${{ matrix.platform }}" = "macos" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            export CARGO_BUILD_TARGET="aarch64-apple-darwin"
          elif [ "${{ matrix.platform }}" = "macos" ] && [ "${{ matrix.arch }}" = "x86_64" ]; then
            export CARGO_BUILD_TARGET="x86_64-apple-darwin"
          fi

          # Build wheel
          maturin build --release --features python --interpreter python${{ matrix.python-version }} --out dist

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}-${{ matrix.arch }}-py${{ matrix.python-version }}
          path: dist/*.whl

  # Additional legacy Linux build for maximum GLIBC compatibility
  build-wheels-manylinux:
    runs-on: ubuntu-latest
    needs: [check-version]
    timeout-minutes: 20
    if: |
      needs.check-version.outputs.should_publish == 'true' &&
      (github.event_name == 'push' || github.event.inputs.publish_to == 'both' || github.event.inputs.publish_to == 'pypi' || github.event.inputs.publish_to == '')

    steps:
      - uses: actions/checkout@v4

      - name: Build manylinux wheels for GLIBC 2.17+ compatibility
        run: |
          # Use manylinux_2_28 container for better package availability (GLIBC 2.28+)
          docker run --rm -v $(pwd):/workspace quay.io/pypa/manylinux_2_28_x86_64 bash -c '
            set -e
            cd /workspace

            # Install system dependencies
            yum install -y hdf5-devel pkgconfig cmake glib2-devel || {
              echo "HDF5 not available, building without HDF5 support"
              yum install -y pkgconfig cmake glib2-devel
              export NO_HDF5=1
            }

            # Install Rust nightly toolchain
            curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly
            source ~/.cargo/env

            # Build for each supported Python version
            for PYBIN in /opt/python/cp{310,311,312}-*/bin; do
              if [ -d "$PYBIN" ]; then
                echo "Building wheel for Python: $PYBIN"

                # Install maturin for this Python version
                "$PYBIN/pip" install maturin>=1.7.4

                # Build the wheel - with or without HDF5 depending on availability
                if [ "${NO_HDF5:-}" = "1" ]; then
                  echo "Building without HDF5 support for maximum compatibility"
                  "$PYBIN/maturin" build --release --features python --no-default-features --interpreter "$PYBIN/python" --out dist
                else
                  "$PYBIN/maturin" build --release --features python --interpreter "$PYBIN/python" --out dist
                fi
              fi
            done

            # Repair wheels for manylinux_2_28 compatibility
            echo "Repairing wheels for manylinux_2_28 compatibility..."
            mkdir -p dist_repaired
            for wheel in dist/*.whl; do
              if [ -f "$wheel" ]; then
                echo "Repairing: $wheel"
                auditwheel repair "$wheel" --plat manylinux_2_28_x86_64 -w dist_repaired/
              fi
            done

            # Replace original wheels with repaired ones
            rm -f dist/*.whl
            mv dist_repaired/*.whl dist/ 2>/dev/null || true
            rmdir dist_repaired 2>/dev/null || true

            echo "Final wheels:"
            ls -la dist/*.whl
          '

      - name: Upload manylinux wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-manylinux_2_28-x86_64
          path: dist/*.whl

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [check-version, build-wheels, build-wheels-manylinux]
    if: |
      needs.check-version.outputs.should_publish == 'true' &&
      (github.event_name == 'push' || github.event.inputs.publish_to == 'both' || github.event.inputs.publish_to == 'pypi' || github.event.inputs.publish_to == '')

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: wheels-*
          merge-multiple: true

      - name: List built wheels
        run: |
          echo "Built wheels:"
          ls -la dist/
          echo
          echo "Wheel details:"
          for wheel in dist/*.whl; do
            echo "$(basename "$wheel"): $(python -m zipfile -l "$wheel" | grep -E '\.(so|pyd)$' || echo 'No native extensions found')"
          done

      - name: Install twine
        run: pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          TEST_TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo "TEST MODE: Uploading to TestPyPI"
            twine upload --repository testpypi --username __token__ --password "$TEST_TWINE_PASSWORD" dist/*.whl --skip-existing --verbose
          else
            echo "Uploading to PyPI"
            twine upload --username __token__ --password "$TWINE_PASSWORD" dist/*.whl --skip-existing --verbose
          fi

  publish-crates:
    runs-on: ubuntu-latest
    needs: [check-version]
    if: |
      needs.check-version.outputs.should_publish == 'true' &&
      (github.event_name == 'push' || github.event.inputs.publish_to == 'both' || github.event.inputs.publish_to == 'crates' || github.event.inputs.publish_to == '')
    steps:
      - uses: actions/checkout@v4

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: "3.11"
          os: ubuntu-latest

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo "TEST MODE: Dry-run publish"
            cargo publish --dry-run
          else
            echo "Publishing version ${{ needs.check-version.outputs.version }}"
            cargo publish --token $CARGO_REGISTRY_TOKEN
          fi

  create-release:
    runs-on: ubuntu-latest
    needs: [check-version, publish-crates, publish-pypi]
    if: |
      always() &&
      needs.check-version.outputs.should_publish == 'true' &&
      github.event.inputs.test_mode != 'true' &&
      (needs.publish-crates.result == 'success' || needs.publish-crates.result == 'skipped') &&
      (needs.publish-pypi.result == 'success' || needs.publish-pypi.result == 'skipped')
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          body: |
            ## evlib v${{ needs.check-version.outputs.version }}

            ### Installation
            ```bash
            pip install evlib==${{ needs.check-version.outputs.version }}
            cargo add evlib@${{ needs.check-version.outputs.version }}
            ```

            ### Links
            - [PyPI Package](https://pypi.org/project/evlib/${{ needs.check-version.outputs.version }}/)
            - [crates.io Package](https://crates.io/crates/evlib/${{ needs.check-version.outputs.version }})
            - [Documentation](https://tallamjr.github.io/evlib/)

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [check-version, publish-crates, publish-pypi]
    if: |
      always() &&
      needs.check-version.outputs.should_publish == 'true' &&
      github.event.inputs.test_mode != 'true' &&
      (needs.publish-crates.result == 'success' || needs.publish-crates.result == 'skipped') &&
      (needs.publish-pypi.result == 'success' || needs.publish-pypi.result == 'skipped')
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: "3.11"
          os: ubuntu-latest

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Install documentation dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Build evlib for documentation
        run: |
          source .venv/bin/activate
          maturin develop --release --features python

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy documentation
        env:
          VERSION: ${{ needs.check-version.outputs.version }}
        run: |
          source .venv/bin/activate
          # Set version in mkdocs config
          export EVLIB_VERSION="v$VERSION"

          # Deploy using mike for versioning
          mkdocs build

          # Deploy to GitHub Pages using mike
          mike deploy --push --update-aliases "$VERSION" latest
          mike set-default --push latest
