name: Publish

on:
  push:
    branches: [main, master]
    paths: ['Cargo.toml']
  workflow_dispatch:
    inputs:
      publish_to:
        description: 'Where to publish'
        required: true
        default: 'both'
        type: choice
        options: [both, pypi, crates]
      test_mode:
        description: 'Use test repositories'
        required: false
        default: false
        type: boolean

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.check.outputs.should_publish }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get version and check if changed
        id: version
        run: |
          version=$(grep '^version[[:space:]]*=' Cargo.toml | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Current version: $version"

      - name: Check if should publish
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          elif git diff HEAD~1 HEAD --name-only | grep -q "Cargo.toml"; then
            prev_version=$(git show HEAD~1:Cargo.toml | grep '^version[[:space:]]*=' | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
            if [ "${{ steps.version.outputs.version }}" != "$prev_version" ]; then
              echo "should_publish=true" >> $GITHUB_OUTPUT
            else
              echo "should_publish=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

  pre-publish-checks:
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should_publish == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: '3.11'
          os: ubuntu-latest

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run checks
        run: |
          cargo fmt --check
          cargo clippy --all-targets --all-features -- -D warnings
          cargo test --release --lib

  publish-crates:
    runs-on: ubuntu-latest
    needs: [check-version, pre-publish-checks]
    if: |
      needs.check-version.outputs.should_publish == 'true' &&
      (github.event.inputs.publish_to == 'both' || github.event.inputs.publish_to == 'crates' || github.event.inputs.publish_to == '')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo "TEST MODE: Dry-run publish"
            cargo publish --dry-run
          else
            echo "Publishing version ${{ needs.check-version.outputs.version }}"
            cargo publish --token $CARGO_REGISTRY_TOKEN
          fi

  build-wheels:
    runs-on: ${{ matrix.os }}
    needs: [check-version, pre-publish-checks]
    if: |
      needs.check-version.outputs.should_publish == 'true' &&
      (github.event.inputs.publish_to == 'both' || github.event.inputs.publish_to == 'pypi' || github.event.inputs.publish_to == '')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: ${{ matrix.python-version }}
          os: ${{ matrix.os }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: publish-${{ matrix.os }}-${{ matrix.python-version }}

      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: echo "Windows dependencies handled by maturin"

      - name: Install maturin and build wheel
        run: |
          source .venv/bin/activate
          uv pip install maturin
          maturin build --release --features python --interpreter python${{ matrix.python-version }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: target/wheels/

  publish-pypi:
    runs-on: ubuntu-latest
    needs: [check-version, build-wheels]
    if: needs.check-version.outputs.should_publish == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: wheels/

      - name: Prepare wheels for upload
        run: |
          mkdir -p dist/
          find wheels/ -name "*.whl" -exec cp {} dist/ \;
          echo "Found $(ls dist/*.whl | wc -l) wheels for upload"

      - name: Install twine
        run: pip install twine

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
          TEST_TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo "TEST MODE: Uploading to TestPyPI"
            twine upload --repository testpypi dist/* --password $TEST_TWINE_PASSWORD
          else
            echo "Uploading to PyPI"
            twine upload dist/*
          fi

  create-release:
    runs-on: ubuntu-latest
    needs: [check-version, publish-crates, publish-pypi]
    if: |
      always() &&
      needs.check-version.outputs.should_publish == 'true' &&
      github.event.inputs.test_mode != 'true' &&
      (needs.publish-crates.result == 'success' || needs.publish-crates.result == 'skipped') &&
      (needs.publish-pypi.result == 'success' || needs.publish-pypi.result == 'skipped')

    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          body: |
            ## evlib v${{ needs.check-version.outputs.version }}

            ### Installation
            ```bash
            pip install evlib==${{ needs.check-version.outputs.version }}
            cargo add evlib@${{ needs.check-version.outputs.version }}
            ```

            ### Links
            - [PyPI Package](https://pypi.org/project/evlib/${{ needs.check-version.outputs.version }}/)
            - [crates.io Package](https://crates.io/crates/evlib/${{ needs.check-version.outputs.version }})
