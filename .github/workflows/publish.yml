name: Publish

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      publish_to:
        description: "Where to publish"
        required: true
        default: "both"
        type: choice
        options: [both, pypi, crates]
      test_mode:
        description: "Use test repositories"
        required: false
        default: false
        type: boolean

jobs:
  check-version:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_publish: ${{ steps.check.outputs.should_publish }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get version and check if changed
        id: version
        run: |
          version=$(grep '^version[[:space:]]*=' Cargo.toml | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Current version: $version"

      - name: Check if should publish
        id: check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
          elif git diff HEAD~1 HEAD --name-only | grep -q "Cargo.toml"; then
            prev_version=$(git show HEAD~1:Cargo.toml | grep '^version[[:space:]]*=' | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
            if [ "${{ steps.version.outputs.version }}" != "$prev_version" ]; then
              echo "should_publish=true" >> $GITHUB_OUTPUT
            else
              echo "should_publish=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

  publish-pypi:
    runs-on: ${{ matrix.os }}
    needs: [check-version]
    if: |
      needs.check-version.outputs.should_publish == 'true' &&
      (github.event_name == 'push' || github.event.inputs.publish_to == 'both' || github.event.inputs.publish_to == 'pypi' || github.event.inputs.publish_to == '')
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: ${{ matrix.python-version }}
          os: ${{ matrix.os }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: publish-${{ matrix.os }}-${{ matrix.python-version }}

      - name: Install maturin
        run: |
          source .venv/bin/activate
          uv pip install maturin>=1.7.4

      - name: Publish to PyPI
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          TEST_MATURIN_PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          source .venv/bin/activate
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo "TEST MODE: Uploading to TestPyPI"
            maturin publish --no-sdist -u __token__ -p "$TEST_MATURIN_PYPI_TOKEN" --repository testpypi --features python --interpreter python${{ matrix.python-version }}
          else
            echo "Uploading to PyPI"
            maturin publish --no-sdist -u __token__ -p "$MATURIN_PYPI_TOKEN" --features python --interpreter python${{ matrix.python-version }}
          fi

  publish-crates:
    runs-on: ubuntu-latest
    needs: [check-version]
    if: |
      needs.check-version.outputs.should_publish == 'true' &&
      (github.event_name == 'push' || github.event.inputs.publish_to == 'both' || github.event.inputs.publish_to == 'crates' || github.event.inputs.publish_to == '')
    steps:
      - uses: actions/checkout@v4

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: "3.11"
          os: ubuntu-latest

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_API_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
            echo "TEST MODE: Dry-run publish"
            cargo publish --dry-run
          else
            echo "Publishing version ${{ needs.check-version.outputs.version }}"
            cargo publish --token $CARGO_REGISTRY_TOKEN
          fi

  create-release:
    runs-on: ubuntu-latest
    needs: [check-version, publish-crates, publish-pypi]
    if: |
      always() &&
      needs.check-version.outputs.should_publish == 'true' &&
      github.event.inputs.test_mode != 'true' &&
      (needs.publish-crates.result == 'success' || needs.publish-crates.result == 'skipped') &&
      (needs.publish-pypi.result == 'success' || needs.publish-pypi.result == 'skipped')
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: Release v${{ needs.check-version.outputs.version }}
          body: |
            ## evlib v${{ needs.check-version.outputs.version }}

            ### Installation
            ```bash
            pip install evlib==${{ needs.check-version.outputs.version }}
            cargo add evlib@${{ needs.check-version.outputs.version }}
            ```

            ### Links
            - [PyPI Package](https://pypi.org/project/evlib/${{ needs.check-version.outputs.version }}/)
            - [crates.io Package](https://crates.io/crates/evlib/${{ needs.check-version.outputs.version }})
            - [Documentation](https://tallamjr.github.io/evlib/)

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [check-version, publish-crates, publish-pypi]
    if: |
      always() &&
      needs.check-version.outputs.should_publish == 'true' &&
      github.event.inputs.test_mode != 'true' &&
      (needs.publish-crates.result == 'success' || needs.publish-crates.result == 'skipped') &&
      (needs.publish-pypi.result == 'success' || needs.publish-pypi.result == 'skipped')
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: "3.11"
          os: ubuntu-latest

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Install documentation dependencies
        run: |
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Build evlib for documentation
        run: |
          source .venv/bin/activate
          maturin develop --release --features python

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy documentation
        env:
          VERSION: ${{ needs.check-version.outputs.version }}
        run: |
          source .venv/bin/activate
          # Set version in mkdocs config
          export EVLIB_VERSION="v$VERSION"

          # Deploy using mike for versioning
          mkdocs build

          # Deploy to GitHub Pages using mike
          mike deploy --push --update-aliases "$VERSION" latest
          mike set-default --push latest
