name: Python

on:
  push:
    branches:
      - main
      - master
    paths:
      - "**.py"
      - "**.rs"
      - "**.ipynb"
      - "pyproject.toml"
      - "pytest.ini"
  pull_request:
    paths:
      - "**.py"
      - "**.rs"
      - "**.ipynb"
      - "pyproject.toml"
      - "pytest.ini"
  workflow_dispatch:

jobs:
  python-tests:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.python-version }}
          cache-targets: true

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: ${{ matrix.python-version }}
          enable-gstreamer: 'true'
          os: ${{ matrix.os }}

      - name: Install dependencies
        run: |
          uv pip install .[all]

      - name: Build evlib (with GStreamer)
        run: |
          source .venv/bin/activate
          uv run maturin develop --release --features gstreamer

      - name: Build evlib (without GStreamer fallback)
        if: failure()
        run: |
          source .venv/bin/activate
          uv run maturin develop --release

      - name: Run pytest on test directory
        run: |
          uv run pytest -v tests/

      - name: Test Jupyter notebooks
        run: |
          uv run pytest --nbmake examples/*.ipynb -v --no-cov

      - name: Generate coverage report
        run: |
          uv run pytest --cov=evlib --cov-report=xml -v tests/

      - name: Test GStreamer functionality
        run: |
          source .venv/bin/activate
          # Test if GStreamer bindings are working
          python -c "import evlib.simulation; print('GStreamer bindings loaded successfully')"
          # Run specific GStreamer tests
          uv run pytest -v tests/test_gstreamer_integration.py tests/test_realtime_bindings.py || echo "GStreamer tests skipped (no webcam available)"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false
