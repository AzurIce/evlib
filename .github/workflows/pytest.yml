name: Python

on:
  push:
    branches:
      - main
      - master
    paths:
      - "**.py"
      - "**.rs"
      - "**.ipynb"
      - "pyproject.toml"
      - "pytest.ini"
  pull_request:
    paths:
      - "**.py"
      - "**.rs"
      - "**.ipynb"
      - "pyproject.toml"
      - "pytest.ini"
  workflow_dispatch:

jobs:
  python-tests:
    name: Python Tests (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        include:
          # Add GPU testing on Ubuntu
          - os: ubuntu-latest
            python-version: "3.11"
            gpu: true

    steps:
      - uses: actions/checkout@v4

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.os }}-${{ matrix.python-version }}
          cache-targets: true

      - name: Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          python-version: ${{ matrix.python-version }}
          enable-gstreamer: 'true'
          os: ${{ matrix.os }}

      - name: Setup GPU support (Ubuntu only)
        if: matrix.gpu == true
        run: |
          echo "GPU testing enabled - will install CUDA toolkit"
          sudo apt-get update
          sudo apt-get install -y nvidia-cuda-toolkit

      - name: Install dependencies
        run: |
          uv pip install .[all]
          # Install Polars GPU support for GPU testing
          if [[ "${{ matrix.gpu }}" == "true" ]]; then
            uv pip install polars[gpu]
          fi

      - name: Build evlib (with GPU features)
        if: matrix.gpu == true
        run: |
          source .venv/bin/activate
          uv run maturin develop --release --features "gstreamer cuda"

      - name: Build evlib (with GStreamer)
        if: matrix.gpu != true
        run: |
          source .venv/bin/activate
          uv run maturin develop --release --features gstreamer

      - name: Build evlib (without GStreamer fallback)
        if: failure()
        run: |
          source .venv/bin/activate
          uv run maturin develop --release

      - name: Run fast tests (CI-friendly)
        run: |
          # Run fast tests excluding slow integration tests and documentation tests
          uv run pytest -v tests/ -m "not slow and not integration" --maxfail=5 --ignore=docs/ --ignore=README.md

      - name: Run GPU-specific tests
        if: matrix.gpu == true
        run: |
          # Test GPU functionality if available
          uv run python -c "
          import polars as pl
          import torch
          import evlib
          print(f'Polars version: {pl.__version__}')
          print(f'PyTorch CUDA available: {torch.cuda.is_available()}')
          print(f'PyTorch version: {torch.__version__}')

          # Test Polars GPU capabilities
          try:
              df = pl.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})
              result = df.select(pl.col('a') + pl.col('b'))
              print('Polars GPU engine test: ✓')
          except Exception as e:
              print(f'Polars GPU test: {e}')

          if torch.cuda.is_available():
              print(f'GPU device: {torch.cuda.get_device_name()}')
              print('Running GPU-specific tests...')
          else:
              print('No GPU available, testing CPU fallback')
          "
          # Run any GPU-specific tests if they exist
          uv run pytest -v tests/ -k "gpu or cuda" || echo "No GPU tests found"

      - name: Run RVT regression tests (integration)
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && matrix.gpu != true
        run: |
          # Run slow integration tests on one specific configuration only
          echo "Running RVT regression tests (slow integration tests)"
          uv run pytest -v tests/test_rvt_regression.py::TestRVTRegression::test_evlib_sparse_to_dense_conversion --maxfail=1
          # Skip the slow file-based test in CI: test_parquet_based_regression_quick

      - name: Test Jupyter notebooks
        if: matrix.python-version == '3.11'  # Only test notebooks on one Python version
        run: |
          uv run pytest --nbmake examples/*.ipynb -v --no-cov

      - name: Generate coverage report
        if: matrix.python-version == '3.11' && matrix.gpu != true  # Only generate coverage once
        run: |
          uv run pytest --cov=evlib --cov-report=xml -v tests/ -m "not slow and not integration" --ignore=docs/ --ignore=README.md

      - name: Test GStreamer functionality
        if: matrix.python-version == '3.11' && matrix.gpu != true  # Only test on one configuration
        run: |
          source .venv/bin/activate
          # Test if GStreamer bindings are working
          python -c "import evlib.simulation; print('GStreamer bindings loaded successfully')" || echo "GStreamer not available"
          # Run specific GStreamer tests
          uv run pytest -v tests/test_gstreamer_integration.py tests/test_realtime_bindings.py || echo "GStreamer tests skipped (no webcam available)"

      - name: Display test summary
        if: always()
        run: |
          echo "=== Test Summary ==="
          echo "OS: ${{ matrix.os }}"
          echo "Python: ${{ matrix.python-version }}"
          echo "GPU enabled: ${{ matrix.gpu }}"
          echo "Fast tests: ✓"
          if [[ "${{ matrix.gpu }}" == "true" ]]; then
            echo "GPU tests: ✓"
          fi
          if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.python-version }}" == "3.11" && "${{ matrix.gpu }}" != "true" ]]; then
            echo "RVT regression tests: ✓"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false
