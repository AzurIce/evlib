name: Documentation CI

on:
  push:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'python/**'
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/docs-ci.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'python/**'
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/docs-ci.yml'

jobs:
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check documentation structure
      run: |
        echo "=== Documentation Structure ==="
        find docs/ -name "*.md" | head -20
        echo "Total markdown files: $(find docs/ -name "*.md" | wc -l)"

        echo "=== Checking for Python code blocks ==="
        python_blocks=$(find docs/ README.md -type f -name "*.md" -exec grep -l '```python' {} \; | wc -l)
        echo "Found $python_blocks files with Python code blocks"

        if [ $python_blocks -eq 0 ]; then
          echo "ERROR: No Python code blocks found!"
          exit 1
        else
          echo "SUCCESS: Documentation contains testable examples"
        fi

    - name: Check index file
      run: |
        if [ -f docs/index.md ]; then
          echo "SUCCESS: docs/index.md exists as documentation index"
          echo "File size: $(du -h docs/index.md | cut -f1)"
          # Check if it has content (should be non-empty)
          if [ -s docs/index.md ]; then
            echo "SUCCESS: docs/index.md has content"
          else
            echo "ERROR: docs/index.md is empty"
            exit 1
          fi
        else
          echo "ERROR: docs/index.md is missing"
          exit 1
        fi

  test-docs-examples:
    name: Test Documentation Examples
    runs-on: ubuntu-latest
    needs: validate-docs
    strategy:
      matrix:
        python-version: ["3.11"]  # Use single version for faster CI

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config cmake

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: docs-ci-${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv venv
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Build evlib
      run: |
        maturin develop --release

    - name: Verify test data exists
      run: |
        echo "=== Checking test data ==="
        if [ -f "data/slider_depth/events.txt" ]; then
          echo "SUCCESS: Main test data file exists"
          echo "Size: $(du -h data/slider_depth/events.txt)"
          echo "Lines: $(wc -l < data/slider_depth/events.txt)"
        else
          echo "ERROR: Main test data file missing: data/slider_depth/events.txt"
          echo "Available data files:"
          find data/ -name "*.txt" -o -name "*.h5" -o -name "*.raw" 2>/dev/null || echo "No data directory found"
          exit 1
        fi

    - name: Test README examples
      run: |
        echo "=== Testing README Examples ==="
        pytest --markdown-docs README.md -v --tb=short --no-header

    - name: Test quickstart documentation
      run: |
        echo "=== Testing Quickstart Guide ==="
        pytest --markdown-docs docs/getting-started/quickstart.md -v --tb=short --no-header

    - name: Test API documentation
      run: |
        echo "=== Testing API Documentation ==="
        pytest --markdown-docs docs/api/ -v --tb=short --no-header --maxfail=10

    - name: Test user guide documentation
      run: |
        echo "=== Testing User Guide ==="
        pytest --markdown-docs docs/user-guide/ -v --tb=short --no-header --maxfail=10

    - name: Test all documentation (comprehensive)
      run: |
        echo "=== Comprehensive Documentation Test ==="
        pytest --markdown-docs README.md docs/ -v --tb=short --no-header --maxfail=50 --junitxml=docs-test-results.xml

        echo "=== Test Summary ==="
        echo "Total test files processed: $(find docs/ -name "*.md" | wc -l) + README.md"
        echo "Test results saved to: docs-test-results.xml"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docs-test-results-${{ matrix.python-version }}
        path: docs-test-results.xml
        retention-days: 30

  test-docs-performance:
    name: Documentation Performance Test
    runs-on: ubuntu-latest
    needs: test-docs-examples
    if: github.event_name == 'push'  # Only run on push, not PR

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config cmake

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv venv
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        source .venv/bin/activate
        uv pip install -e ".[dev]"

    - name: Build evlib
      run: |
        maturin develop --release

    - name: Performance test documentation examples
      run: |
        echo "=== Documentation Performance Test ==="
        time pytest --markdown-docs README.md docs/ -q --tb=no --no-header

        echo "=== Memory usage during tests ==="
        python -c "
        import psutil
        import os
        process = psutil.Process(os.getpid())
        print(f'Memory usage: {process.memory_info().rss / 1024 / 1024:.1f} MB')
        "

  summary:
    name: Documentation CI Summary
    runs-on: ubuntu-latest
    needs: [validate-docs, test-docs-examples, test-docs-performance]
    if: always()

    steps:
    - name: Check results
      run: |
        echo "=== Documentation CI Summary ==="
        echo "Validation: ${{ needs.validate-docs.result }}"
        echo "Examples Test: ${{ needs.test-docs-examples.result }}"
        echo "Performance Test: ${{ needs.test-docs-performance.result }}"

        if [[ "${{ needs.validate-docs.result }}" == "success" && "${{ needs.test-docs-examples.result }}" == "success" ]]; then
          echo "SUCCESS: Documentation CI passed!"
          exit 0
        else
          echo "ERROR: Documentation CI failed!"
          exit 1
        fi
