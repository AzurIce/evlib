name: Test Documentation Examples

on:
  push:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'python/**'
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/test-docs.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'docs/**'
      - 'python/**'
      - 'src/**'
      - 'pyproject.toml'
      - '.github/workflows/test-docs.yml'

jobs:
  test-docs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config cmake

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv pip install -e ".[dev]"

    - name: Build evlib
      run: |
        maturin develop --release

    - name: Test documentation examples
      run: |
        pytest --markdown-docs README.md docs/ -v --tb=short --maxfail=10

    - name: Generate documentation test report
      run: |
        pytest --markdown-docs README.md docs/ --tb=short --maxfail=10 --junitxml=docs-test-results.xml
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docs-test-results-${{ matrix.python-version }}
        path: docs-test-results.xml
        retention-days: 7

  test-docs-quick:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config cmake

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv pip install -e ".[dev]"

    - name: Build evlib
      run: |
        maturin develop --release

    - name: Test documentation examples (quick check)
      run: |
        # Test only quickstart guide as a quick smoke test
        pytest --markdown-docs docs/getting-started/quickstart.md -v --tb=short --maxfail=5

  test-docs-comprehensive:
    runs-on: ubuntu-latest
    needs: test-docs-quick
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'test-docs')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev pkg-config cmake

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv pip install -e ".[dev]"

    - name: Build evlib
      run: |
        maturin develop --release

    - name: Test README examples
      run: |
        pytest --markdown-docs README.md -v --tb=short
      continue-on-error: true

    - name: Test all documentation examples
      run: |
        pytest --markdown-docs README.md docs/ -v --tb=short --maxfail=50
      continue-on-error: true

    - name: Generate comprehensive test report
      run: |
        pytest --markdown-docs README.md docs/ --tb=short --junitxml=comprehensive-docs-test-results.xml
      continue-on-error: true

    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: comprehensive-docs-test-results
        path: comprehensive-docs-test-results.xml
        retention-days: 7

  validate-docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pytest-markdown-docs
      run: |
        pip install pytest-markdown-docs

    - name: Validate documentation structure
      run: |
        echo "=== Documentation Structure Validation ==="
        # Check that documentation files exist and are valid
        docs_count=$(find docs/ -name "*.md" | wc -l)
        echo "Found $docs_count markdown files"

        # List some documentation files
        find docs/ -name "*.md" | head -10

        # Check for Python code blocks
        python_blocks=$(find docs/ README.md -type f -name "*.md" -exec grep -l '```python' {} \; | wc -l)
        echo "Found $python_blocks files with Python code blocks"

        if [ $python_blocks -eq 0 ]; then
          echo "WARNING: No Python code blocks found!"
        else
          echo "SUCCESS: Documentation contains testable code examples"
        fi

    - name: Check configuration
      run: |
        echo "=== Configuration Check ==="
        # Check if pyproject.toml exists
        if [ -f "pyproject.toml" ]; then
          echo "SUCCESS: pyproject.toml exists"

          # Check for pytest configuration
          if grep -q "pytest" pyproject.toml; then
            echo "SUCCESS: pytest configuration found"
          else
            echo "WARNING: pytest configuration not found"
          fi

          # Check for markdown docs configuration
          if grep -q "markdown" pyproject.toml; then
            echo "SUCCESS: markdown docs configuration found"
          else
            echo "WARNING: markdown docs configuration not found"
          fi
        else
          echo "ERROR: pyproject.toml not found"
        fi
