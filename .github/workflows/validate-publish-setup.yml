name: Validate Publishing Setup

on:
  workflow_dispatch:
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  validate-setup:
    name: Validate Publishing Configuration
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin twine

    - name: Check Cargo.toml version format
      run: |
        version=$(grep '^version[[:space:]]*=' Cargo.toml | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
        echo "Current version: $version"

        if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "ERROR: Invalid version format in Cargo.toml: $version"
          echo "Expected format: X.Y.Z (e.g., 1.2.3)"
          exit 1
        fi

        echo "SUCCESS: Version format is valid"

    - name: Check pyproject.toml configuration
      run: |
        echo "=== pyproject.toml validation ==="

        # Check if maturin is configured
        if grep -q "\[tool.maturin\]" pyproject.toml; then
          echo "SUCCESS: maturin configuration found"
        else
          echo "ERROR: maturin configuration missing"
          exit 1
        fi

        # Check Python version support
        if grep -q "requires-python.*3\.10" pyproject.toml; then
          echo "SUCCESS: Python version requirements found"
        else
          echo "ERROR: Python version requirements missing or incorrect"
          exit 1
        fi

        # Check if version is dynamic
        if grep -q 'dynamic.*version' pyproject.toml; then
          echo "SUCCESS: Dynamic versioning configured"
        else
          echo "ERROR: Dynamic versioning not configured"
          exit 1
        fi

    - name: Test maturin build
      run: |
        echo "=== Testing maturin build ==="

        # Test basic build (without dependencies that might fail in CI)
        if maturin build --help > /dev/null 2>&1; then
          echo "SUCCESS: maturin is functional"
        else
          echo "ERROR: maturin is not working correctly"
          exit 1
        fi

        echo "SUCCESS: Build tools are configured correctly"

    - name: Check required secrets (simulation)
      run: |
        echo "=== Required Secrets Check ==="
        echo "The following secrets should be configured in GitHub repository settings:"
        echo ""
        echo "For PyPI publishing:"
        echo "  - PYPI_API_TOKEN: Production PyPI API token"
        echo "  - TEST_PYPI_API_TOKEN: TestPyPI API token (for testing)"
        echo ""
        echo "For crates.io publishing:"
        echo "  - CARGO_REGISTRY_TOKEN: crates.io API token"
        echo ""
        echo "For GitHub releases:"
        echo "  - GITHUB_TOKEN: Automatically provided by GitHub Actions"
        echo ""
        echo "To check if secrets are configured, look for them in:"
        echo "GitHub repo -> Settings -> Secrets and variables -> Actions"

    - name: Test wheel build simulation
      run: |
        echo "=== Wheel Build Test ==="
        echo "Testing if the project structure supports wheel building..."

        # Check if python source directory exists
        if [ -d "python" ]; then
          echo "SUCCESS: Python source directory found"
        else
          echo "WARNING: No python/ directory found"
        fi

        # Check for Rust lib configuration
        if grep -q 'crate-type.*cdylib' Cargo.toml; then
          echo "SUCCESS: cdylib crate type configured for Python bindings"
        else
          echo "ERROR: cdylib crate type not configured"
          exit 1
        fi

        echo "SUCCESS: Project structure supports wheel building"

    - name: Validate GitHub Actions workflow
      run: |
        echo "=== GitHub Actions Workflow Validation ==="

        # Check if publish workflow exists
        if [ -f ".github/workflows/publish.yml" ]; then
          echo "SUCCESS: Publish workflow found"
        else
          echo "ERROR: Publish workflow missing"
          exit 1
        fi

        # Check workflow syntax (basic validation)
        if grep -q "on:" .github/workflows/publish.yml; then
          echo "SUCCESS: Workflow has trigger configuration"
        else
          echo "ERROR: Workflow trigger configuration missing"
          exit 1
        fi

        # Check for required jobs
        required_jobs=("check-version" "publish-pypi" "publish-crates")
        for job in "${required_jobs[@]}"; do
          if grep -q "$job:" .github/workflows/publish.yml; then
            echo "SUCCESS: Job '$job' found"
          else
            echo "ERROR: Job '$job' missing"
            exit 1
          fi
        done

    - name: Summary
      run: |
        echo ""
        echo "=== Publishing Setup Validation Complete ==="
        echo ""
        echo "SUCCESS: All publishing configuration checks passed!"
        echo ""
        echo "Your repository is configured for automatic publishing when:"
        echo "1. You update the version in Cargo.toml"
        echo "2. You push the change to the main/master branch"
        echo ""
        echo "Manual publishing is also available via:"
        echo "1. GitHub Actions -> Publish to PyPI and crates.io -> Run workflow"
        echo "2. The ./bump-version.sh script for version bumping"
        echo ""
        echo "Make sure the required secrets are configured in GitHub repository settings!"
